// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package nl.ica.ddoa.dda.routeplanner.domain;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import nl.ica.ddoa.dda.routeplanner.domain.Wegwerkzaamheid;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Wegwerkzaamheid_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Wegwerkzaamheid.entityManager;
    
    public static final EntityManager Wegwerkzaamheid.entityManager() {
        EntityManager em = new Wegwerkzaamheid().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Wegwerkzaamheid.countWegwerkzaamheids() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Wegwerkzaamheid o", Long.class).getSingleResult();
    }
    
    public static List<Wegwerkzaamheid> Wegwerkzaamheid.findAllWegwerkzaamheids() {
        return entityManager().createQuery("SELECT o FROM Wegwerkzaamheid o", Wegwerkzaamheid.class).getResultList();
    }
    
    public static Wegwerkzaamheid Wegwerkzaamheid.findWegwerkzaamheid(Long id) {
        if (id == null) return null;
        return entityManager().find(Wegwerkzaamheid.class, id);
    }
    
    public static List<Wegwerkzaamheid> Wegwerkzaamheid.findWegwerkzaamheidEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Wegwerkzaamheid o", Wegwerkzaamheid.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Wegwerkzaamheid.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Wegwerkzaamheid.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Wegwerkzaamheid attached = Wegwerkzaamheid.findWegwerkzaamheid(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Wegwerkzaamheid.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Wegwerkzaamheid.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Wegwerkzaamheid Wegwerkzaamheid.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Wegwerkzaamheid merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
